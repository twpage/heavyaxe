// Generated by CoffeeScript 1.7.1
(function() {
  var scrollRecall, scrollSacrifice, scrollShatter, scrollShield, scrollTeleport;

  window.Brew.Interaction.Scroll = {
    use: function(user, scroll) {
      var new_id;
      user.inventory.removeItemByKey(scroll.inv_key);
      if (scroll.itemType === Brew.ItemType.type_of.scroll.recall.id) {
        scrollRecall(scroll);
      } else if (scroll.itemType === Brew.ItemType.type_of.scroll.sacrifice.id) {
        scrollSacrifice(scroll);
      } else if (scroll.itemType === Brew.ItemType.type_of.scroll.teleport.id) {
        scrollTeleport(scroll);
      } else if (scroll.itemType === Brew.ItemType.type_of.scroll.shield.id) {
        scrollShield(scroll);
      } else if (scroll.itemType === Brew.ItemType.type_of.scroll.shatter.id) {
        scrollShatter(scroll);
      } else {
        console.error("unexpected scroll item", scroll);
      }
      new_id = Brew.Catalog.identify(scroll);
      if (new_id) {
        Brew.Display.drawDisplayAll();
        Brew.msg("" + (Brew.Catalog.getItemName(scroll)));
      }
      return true;
    }
  };

  scrollShatter = function(scroll) {
    var level, neighbor_xy, player, smashed_anything, t, _i, _len, _ref;
    player = Brew.gamePlayer();
    level = Brew.gameLevel();
    smashed_anything = false;
    _ref = player.coordinates.getAdjacent();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      neighbor_xy = _ref[_i];
      if (!level.checkValid(neighbor_xy)) {
        continue;
      }
      t = level.getTerrainAt(neighbor_xy);
      if (t.blocks_walking) {
        level.setTerrainAt(neighbor_xy, Brew.terrainFactory("FLOOR"));
        Brew.Display.drawMapAt(neighbor_xy);
        smashed_anything = true;
      }
    }
    if (smashed_anything) {
      level.calcTerrainNavigation();
    }
    return Brew.msg("Kersmash");
  };

  scrollShield = function(scroll) {
    var player;
    player = Brew.gamePlayer();
    player.setFlag(Brew.flags.is_shielded.id);
    Brew.Display.drawMapAt(player.coordinates);
    return Brew.Display.drawHudAll();
  };

  scrollTeleport = function(scroll) {
    var level, old_xy, player, teleport_xy;
    player = Brew.gamePlayer();
    level = Brew.gameLevel();
    teleport_xy = Brew.Axe.findSafeLevelCoordinates(3);
    old_xy = player.coordinates;
    level.removeMonsterAt(old_xy);
    level.setMonsterAt(teleport_xy, player);
    Brew.Display.drawMapAt(old_xy);
    Brew.Display.drawMapAt(teleport_xy);
    Brew.Sounds.play("portal");
    return Brew.Game.endPlayerTurn();
  };

  scrollRecall = function(scroll) {
    return Brew.Axe.doRecallAxe(scroll);
  };

  scrollSacrifice = function(scroll) {
    var player;
    player = Brew.gamePlayer();
    player.getStat(Brew.stat.stamina).reset();
    player.getStat(Brew.stat.doom).addTo(Brew.config.sacrifice_cost);
    Brew.Game.addAnimation(new Brew.ShinyEffect(player.coordinates, Brew.colors.stamina));
    Brew.Display.drawHudAll();
    return Brew.Game.runAnimationsOnly(true);
  };

}).call(this);

//# sourceMappingURL=scroll.map
