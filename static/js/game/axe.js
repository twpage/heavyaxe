// Generated by CoffeeScript 1.7.1
(function() {
  var getRecallAxePath,
    __hasProp = {}.hasOwnProperty;

  Brew.Axe = {
    doPlayerDropAxe: function() {
      var axe, item_at, level, player;
      level = Brew.gameLevel();
      player = Brew.gamePlayer();
      item_at = level.getItemAt(player.coordinates);
      if (item_at != null) {
        Brew.msg("Something's here");
        return false;
      }
      axe = player.inventory.getEquipped(Brew.equip_slot.melee);
      if (!axe) {
        Brew.msg("No Axe");
        return false;
      }
      Brew.Game.doPlayerRemove(axe);
      player.inventory.removeItemByKey(axe.inv_key);
      level.setItemAt(player.coordinates, axe);
      Brew.Display.drawHudAll();
      Brew.Sounds.play("dropaxe");
      Brew.Game.endPlayerTurn();
      return true;
    },
    doPlayerSelectInventoryHotKey: function(keycode) {
      var i, index, inv_key, item, item_type, items_of_type, player;
      player = Brew.gamePlayer();
      index = keycode - 49;
      if (index < 0 || index >= Brew.ItemType.list_of.scroll.length) {
        console.error("bad hotkey was pressed " + keycode);
      }
      item_type = Brew.ItemType.list_of.scroll[index];
      items_of_type = (function() {
        var _i, _len, _ref, _results;
        _ref = player.inventory.getItems();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.group === Brew.group.scroll.id && i.itemType === item_type) {
            _results.push(i);
          }
        }
        return _results;
      })();
      if (items_of_type.length === 0) {
        Brew.msg("No scrolls");
        return false;
      }
      inv_key = String.fromCharCode(keycode);
      item = items_of_type[0];
      return Brew.Game.doPlayerApply(item, inv_key);
    },
    doPlayerAction: function() {
      var item, level, player, portal, wpn_equipped;
      level = Brew.gameLevel();
      player = Brew.gamePlayer();
      item = level.getItemAt(player.coordinates);
      portal = level.getPortalAt(player.coordinates);
      if (item != null) {
        if (item.group === Brew.group.info.id) {
          Brew.Menu.popup.context = "info";
          Brew.Menu.popup.item = item;
          return Brew.Menu.showInfoScreen();
        } else if (item.group === Brew.group.rune.id) {
          return Brew.Interaction.Rune.use(player, item);
        }
      } else if (portal != null) {
        wpn_equipped = player.inventory.getEquipped(Brew.equip_slot.melee);
        if (wpn_equipped == null) {
          return Brew.msg("Need the Axe");
        } else {
          return Brew.Game.changeLevels(portal);
        }
      } else {
        return Brew.Axe.doPlayerRest();
      }
    },
    finishRecallAxe: function(item) {
      var level, player;
      player = Brew.gamePlayer();
      level = Brew.gameLevel();
      return Brew.Axe.pickupAndWieldAxe(item, true);
    },
    doPlayerRest: function() {
      var player, recharge;
      player = Brew.gamePlayer();
      recharge = 1;
      player.getStat(Brew.stat.stamina).addTo(recharge);
      Brew.Display.drawHudAll();
      return Brew.Axe.doPlayerTaunt();
    },
    onPlayerMove: function() {
      var carrying_axe, inv_key, item_at, level, player, weapon;
      level = Brew.gameLevel();
      player = Brew.gamePlayer();
      weapon = player.inventory.getEquipped(Brew.equip_slot.melee);
      carrying_axe = weapon != null;
      if (carrying_axe) {
        player.getStat(Brew.stat.stamina).deduct(1);
        Brew.Display.drawHudAll();
      } else {
        player.getStat(Brew.stat.stamina).addTo(1);
        Brew.Display.drawHudAll();
      }
      player.current_tile_turns = 0;
      item_at = level.getItemAt(player.coordinates);
      if (item_at != null) {
        if (item_at.group === Brew.group.weapon.id) {
          Brew.Sounds.play("pickup");
          return Brew.Axe.pickupAndWieldAxe(item_at);
        } else if (item_at.group === Brew.group.rune.id) {

        } else {
          inv_key = player.inventory.addItem(item_at);
          if (!inv_key) {
            return Brew.msg("Inventory Full");
          } else {
            level.removeItemAt(player.coordinates);
            Brew.msg("Picked up");
            return Brew.Sounds.play("pickup");
          }
        }
      }
    },
    pickupAndWieldAxe: function(should_be_axe, from_recall) {
      var carrying_axe, inv_key, level, player, weapon;
      if (from_recall == null) {
        from_recall = false;
      }
      level = Brew.gameLevel();
      player = Brew.gamePlayer();
      weapon = player.inventory.getEquipped(Brew.equip_slot.melee);
      carrying_axe = weapon != null;
      if (carrying_axe) {
        console.error("something horrible happened with another weapon");
      }
      inv_key = player.inventory.addItem(should_be_axe, "0");
      if (!from_recall) {
        level.removeItemAt(should_be_axe.coordinates);
      }
      player.inventory.equipItem(should_be_axe, Brew.equip_slot.melee);
      return Brew.Display.drawHudAll();
    },
    doPlayerTaunt: function() {
      var level, player, radius;
      level = Brew.gameLevel();
      player = Brew.gamePlayer();
      if (player.current_tile_turns == null) {
        player.current_tile_turns = 1;
      } else {
        player.current_tile_turns += 1;
      }
      Brew.Axe.increaseLevelOfDoom(1);
      radius = Math.min(Brew.config.max_taunt_radius, player.current_tile_turns + 1);
      Brew.Game.addAnimation(new Brew.TauntEffect(Brew.gamePlayer().coordinates, radius, Brew.colors.red));
      return Brew.Game.endPlayerTurn();
    },
    tauntMonsterAt: function(target_xy) {
      var m;
      m = Brew.gameLevel().getMonsterAt(target_xy);
      if ((m != null) && !Brew.utils.compareThing(m, Brew.gamePlayer())) {
        return Brew.Axe.tauntMonster(m);
      }
    },
    tauntMonster: function(monster) {
      monster.last_player_xy = Brew.gamePlayer().coordinates;
      monster.status = Brew.monster_status.HUNT;
      monster.giveup = 0;
      return Brew.Game.setFlagWithCounter(monster, Brew.flags.is_angry.id, 5);
    },
    updateOnKill: function(victim, is_melee, overkill) {
      var m, monsters;
      Brew.gamePlayer().getStat(Brew.stat.stamina).reset();
      Brew.Display.drawHudAll();
      monsters = (function() {
        var _i, _len, _ref, _results;
        _ref = Brew.gameLevel().getMonsters();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          if (!Brew.utils.compareDef(m, "WARDEN")) {
            _results.push(m);
          }
        }
        return _results;
      })();
      if (monsters.length === 1) {
        return Brew.Axe.createPortalToNextLevel();
      }
    },
    createPortalToNextLevel: function() {
      var exit_ranking, exit_xy, i, k, key, level, lowest_ranking, neighbor_xy, neighbors, player, rank, t, val, _i, _len;
      level = Brew.gameLevel();
      player = Brew.gamePlayer();
      if ((level.exit_xy != null) && level.checkValid(level.exit_xy)) {
        return false;
      }
      exit_xy = null;
      exit_ranking = {};
      neighbors = player.coordinates.getAdjacent();
      neighbors = neighbors.randomize();
      for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
        neighbor_xy = neighbors[_i];
        if (!level.checkValid(neighbor_xy)) {
          continue;
        }
        exit_ranking[neighbor_xy.toKey()] = 0;
        t = level.getTerrainAt(neighbor_xy);
        if (t.blocks_walking) {
          exit_ranking[neighbor_xy.toKey()] += 1;
        }
        i = level.getItemAt(neighbor_xy);
        if (i != null) {
          exit_ranking[neighbor_xy.toKey()] += 1;
        }
      }
      lowest_ranking = Math.min.apply(this, (function() {
        var _results;
        _results = [];
        for (k in exit_ranking) {
          if (!__hasProp.call(exit_ranking, k)) continue;
          val = exit_ranking[k];
          _results.push(val);
        }
        return _results;
      })());
      for (key in exit_ranking) {
        if (!__hasProp.call(exit_ranking, key)) continue;
        rank = exit_ranking[key];
        if (rank === lowest_ranking) {
          exit_xy = keyToCoord(key);
          break;
        }
      }
      if (exit_xy == null) {
        console.error("something terrible has happened!");
      }
      level.exit_xy = exit_xy;
      level.setUnlinkedPortalAt(exit_xy);
      level.setTerrainAt(exit_xy, Brew.terrainFactory("STAIRS_DOWN"));
      Brew.Display.drawMapAt(exit_xy);
      return true;
    },
    findSafeLevelCoordinates: function(min_monster_distance) {
      var distances, final_xy, item_at, level, m, m_xy, min_distance, monster_at, monster_locations, player, tries, xy;
      player = Brew.gamePlayer();
      level = Brew.gameLevel();
      monster_locations = (function() {
        var _i, _len, _ref, _results;
        _ref = level.getMonsters();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          if (!Brew.utils.compareThing(m, player)) {
            _results.push(m.coordinates);
          }
        }
        return _results;
      })();
      if (monster_locations.length === 0) {
        xy = level.getRandomWalkableLocation();
        return xy;
      }
      tries = 0;
      final_xy = null;
      while (tries < 25) {
        xy = level.getRandomWalkableLocation();
        monster_at = level.getMonsterAt(xy);
        if (monster_at != null) {
          tries += 1;
          continue;
        }
        item_at = level.getItemAt(xy);
        if (item_at != null) {
          tries += 1;
          continue;
        }
        distances = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = monster_locations.length; _i < _len; _i++) {
            m_xy = monster_locations[_i];
            _results.push(Brew.utils.dist2d(xy, m_xy));
          }
          return _results;
        })();
        min_distance = Math.min.apply(this, distances);
        if (min_distance <= min_monster_distance) {
          tries += 1;
          continue;
        }
        final_xy = xy;
        break;
      }
      if (final_xy == null) {
        final_xy = level.getRandomWalkableLocation();
      }
      return final_xy;
    },
    doRecallAxeWithPath: function(recall_path, axe_xy) {
      var axe_item, level, player;
      player = Brew.gamePlayer();
      level = Brew.gameLevel();
      if ((recall_path == null) || recall_path.length === 0) {
        console.error("error pathing back to player");
      }
      axe_item = level.getItemAt(axe_xy);
      level.removeItemAt(axe_xy);
      Brew.Game.addAnimation(new Brew.RecallEffect(player, axe_item, recall_path));
      return Brew.Game.endPlayerTurn();
    },
    doRecallAxe: function(from_item) {
      var axe, axe_item, axe_list, axe_xy, i, level, player;
      player = Brew.gamePlayer();
      level = Brew.gameLevel();
      axe = Brew.gamePlayer().inventory.getEquipped(Brew.equip_slot.melee);
      if (axe != null) {
        return Brew.msg("Axe in hand");
      } else {
        axe_list = (function() {
          var _i, _len, _ref, _results;
          _ref = level.getItems();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i.group === Brew.group.weapon.id) {
              _results.push(i);
            }
          }
          return _results;
        })();
        if ((axe_list == null) || axe_list.length === 0) {
          console.error("something bad happened when finding the axe");
        } else if (axe_list.length > 1) {
          console.error("something WEIRD happened when finding the axe");
        }
        axe_item = axe_list[0];
        axe_xy = axe_item.coordinates;
        if (axe_xy.compare(player.coordinates)) {
          return Brew.msg("Axe at location");
        } else {
          Brew.Menu.popup.axe_xy = axe_xy;
          return Brew.Menu.showRecall();
        }
      }
    },
    explodeOnDeath: function(victim) {
      var bolt, surround_xy, _i, _len, _ref, _results;
      bolt = Brew.featureFactory("PROJ_EXPLOSION");
      bolt.damage = 1;
      _ref = victim.coordinates.getSurrounding();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        surround_xy = _ref[_i];
        if (Brew.gameLevel().checkValid(surround_xy)) {
          _results.push(Brew.Game.addAnimation(new Brew.ProjectileEffect(victim, bolt, [surround_xy])));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    respawnOnDeath: function(victim) {
      var level, new_monster, old_hp, respawn_xy;
      level = Brew.gameLevel();
      respawn_xy = Brew.Axe.findSafeLevelCoordinates(4);
      old_hp = victim.getStat(Brew.stat.health).getMax();
      new_monster = Brew.monsterFactory(victim.def_id);
      new_monster.createStat(Brew.stat.health, old_hp + 1);
      level.setMonsterAt(respawn_xy, new_monster);
      Brew.Game.scheduler.add(new_monster, true);
      return true;
    },
    getScrollStack: function() {
      var item, scroll_stack, scroll_type, _i, _j, _len, _len1, _ref, _ref1;
      scroll_stack = {};
      _ref = Brew.ItemType.list_of.scroll;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        scroll_type = _ref[_i];
        scroll_stack[scroll_type] = [];
      }
      _ref1 = Brew.gamePlayer().inventory.getItems();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        if (item.group !== Brew.group.scroll.id) {
          continue;
        }
        scroll_stack[item.itemType].push(item);
      }
      return scroll_stack;
    },
    getScrollInventory: function() {
      var scroll_stack;
      scroll_stack = Brew.Axe.getScrollStack();
      return new Brew.ScrollInventory(scroll_stack);
    },
    increaseLevelOfDoom: function(amount) {
      var player;
      if (amount == null) {
        amount = 1;
      }
      player = Brew.gamePlayer();
      player.getStat(Brew.stat.doom).addTo(amount);
      if (player.getStat(Brew.stat.doom).isMax()) {
        return Brew.Axe.summonWarden();
      }
    },
    summonWarden: function() {
      var level, spawn_xy, warden;
      level = Brew.gameLevel();
      if (level.has_warden != null) {
        return false;
      }
      level.has_warden = true;
      if (Brew.Game.persist_warden != null) {
        warden = Brew.Game.persist_warden;
        warden.getStat(Brew.stat.health).reset();
        delete warden.is_dead;
      } else {
        warden = Brew.monsterFactory("WARDEN");
        Brew.Game.persist_warden = warden;
      }
      spawn_xy = Brew.Axe.findSafeLevelCoordinates(4);
      Brew.gameLevel().setMonsterAt(spawn_xy, warden);
      Brew.Game.scheduler.add(warden, true);
      return true;
    },
    getRecallPaths: function() {
      return new Brew.PathLibrary(Brew.Menu.popup.axe_xy, Brew.gamePlayer().coordinates);
    }
  };

  getRecallAxePath = function(start_xy, end_xy, startIsNotAxe) {
    var astar, path, recall_axe_passable_fn, update_fn;
    if (startIsNotAxe == null) {
      startIsNotAxe = false;
    }
    path = [];
    recall_axe_passable_fn = (function(_this) {
      return function(x, y) {
        var i, m, t, xy;
        xy = new Coordinate(x, y);
        t = Brew.gameLevel().getTerrainAt(xy);
        i = Brew.gameLevel().getItemAt(xy);
        if ((i != null) && startIsNotAxe && i.group === Brew.group.weapon.id) {
          return false;
        }
        if (t != null) {
          if (t.blocks_walking) {
            return false;
          } else {
            m = Brew.gameLevel().getMonsterAt(xy);
            if (m != null) {
              if (m.group === "player") {
                if (startIsNotAxe) {
                  return false;
                } else {
                  return true;
                }
              } else {
                return true;
              }
            } else {
              return true;
            }
          }
        } else {
          return false;
        }
      };
    })(this);
    update_fn = function(x, y) {
      return path.push(new Coordinate(x, y));
    };
    astar = new ROT.Path.AStar(end_xy.x, end_xy.y, recall_axe_passable_fn, {
      topology: 4
    });
    astar.compute(start_xy.x, start_xy.y, update_fn);
    return path;
  };

  window.Brew.PathLibrary = (function() {
    function PathLibrary(start_xy, end_xy) {
      var adj_path, end_points, neighbor_xy, new_end_xy, new_start_xy, start_points, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
      this.path_list = [];
      start_points = [];
      _ref = start_xy.getAdjacent();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        neighbor_xy = _ref[_i];
        if (Brew.gameLevel().checkValid(neighbor_xy) && (!Brew.gameLevel().getTerrainAt(neighbor_xy).blocks_walking)) {
          start_points.push(neighbor_xy);
        }
      }
      end_points = [];
      _ref1 = end_xy.getAdjacent();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        neighbor_xy = _ref1[_j];
        if (Brew.gameLevel().checkValid(neighbor_xy) && (!Brew.gameLevel().getTerrainAt(neighbor_xy).blocks_walking)) {
          end_points.push(neighbor_xy);
        }
      }
      for (_k = 0, _len2 = start_points.length; _k < _len2; _k++) {
        new_start_xy = start_points[_k];
        for (_l = 0, _len3 = end_points.length; _l < _len3; _l++) {
          new_end_xy = end_points[_l];
          adj_path = getRecallAxePath(new_start_xy, new_end_xy, true);
          if ((adj_path == null) || adj_path.length === 0) {
            continue;
          }
          adj_path.unshift(start_xy);
          adj_path.push(end_xy);
          this.path_list.push(adj_path);
        }
      }
      if (this.path_list.length === 0) {
        this.path_list.push(getRecallAxePath(start_xy, end_xy));
      }
      this.index = 0;
    }

    PathLibrary.prototype.getCurrentPath = function() {
      return this.path_list[this.index];
    };

    PathLibrary.prototype.next = function() {
      return this.rotate((function(_this) {
        return function(a, b) {
          return a + b;
        };
      })(this));
    };

    PathLibrary.prototype.prev = function() {
      return this.rotate((function(_this) {
        return function(a, b) {
          return a - b;
        };
      })(this));
    };

    PathLibrary.prototype.rotate = function(fn) {
      var next_index;
      next_index = fn(this.index, 1).mod(this.path_list.length);
      this.index = next_index;
      return true;
    };

    return PathLibrary;

  })();

  window.Brew.ScrollInventory = (function() {
    function ScrollInventory(scroll_stack) {
      var i, scroll_item_list, scroll_type;
      this.scroll_count = {};
      this.scroll_example = {};
      this.scroll_list = [];
      this.index = null;
      i = 0;
      for (scroll_type in scroll_stack) {
        if (!__hasProp.call(scroll_stack, scroll_type)) continue;
        scroll_item_list = scroll_stack[scroll_type];
        this.scroll_list.push(scroll_type);
        this.scroll_count[scroll_type] = scroll_item_list.length;
        if (scroll_item_list.length > 0 && this.index === null) {
          this.index = i;
        }
        this.scroll_example[scroll_type] = scroll_item_list.length > 0 ? scroll_item_list[0] : null;
        i += 1;
      }
      return this.index !== null;
    }

    ScrollInventory.prototype.getNumberOf = function(scroll_type) {
      return this.scroll_count[scroll_type];
    };

    ScrollInventory.prototype.getExampleOf = function(scroll_type) {
      return this.scroll_example[scroll_type];
    };

    ScrollInventory.prototype.next = function() {
      return this.rotate((function(_this) {
        return function(a, b) {
          return a + b;
        };
      })(this));
    };

    ScrollInventory.prototype.prev = function() {
      return this.rotate((function(_this) {
        return function(a, b) {
          return a - b;
        };
      })(this));
    };

    ScrollInventory.prototype.rotate = function(fn) {
      var i, next_index, next_type, _i, _ref;
      for (i = _i = 1, _ref = this.scroll_list.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        next_index = fn(this.index, i).mod(this.scroll_list.length);
        next_type = this.scroll_list[next_index];
        if (this.getNumberOf(next_type) > 0) {
          this.index = next_index;
          return true;
        }
      }
      return false;
    };

    ScrollInventory.prototype.getNumberOfCurrent = function() {
      var current_type;
      current_type = this.scroll_list[this.index];
      return this.getNumberOf(current_type);
    };

    ScrollInventory.prototype.getExampleOfCurrent = function() {
      var current_type;
      current_type = this.scroll_list[this.index];
      return this.getExampleOf(current_type);
    };

    return ScrollInventory;

  })();

}).call(this);

//# sourceMappingURL=axe.map
