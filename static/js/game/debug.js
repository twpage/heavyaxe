// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  window.Brew.Debug = {
    debugMonsterFov: function() {
      var current_idx, fov_monster, indices, m, monsters, new_idx;
      monsters = this.gameLevel().getMonsters();
      fov_monster = null;
      if (monsters.length === 0) {
        console.log("No monsters on the level");
      }
      if (this.debug.fov.monster == null) {
        this.debug.fov.monster = monsters[0];
      } else {
        indices = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = monsters.length; _i < _len; _i++) {
            m = monsters[_i];
            _results.push(m.id);
          }
          return _results;
        })();
        current_idx = indices.indexOf(this.debug.fov.monster.id);
        new_idx = current_idx + 1;
        if (new_idx > monsters.length) {
          this.debug.fov = {};
        } else {
          this.debug.fov.monster = monsters[new_idx];
        }
      }
      return this.drawDisplayAll();
    },
    pathmaps: {},
    debugPathMaps: function() {
      var arg, key, monster, pathmap, title, _i, _len, _ref, _ref1, _ref2;
      if (Brew.Debug.pathmaps.list == null) {
        Brew.Debug.pathmaps.list = [];
        Brew.Debug.pathmaps.index = -1;
        _ref = Brew.gameLevel().getMonsters();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          monster = _ref[_i];
          _ref1 = monster.pathmaps;
          for (key in _ref1) {
            if (!__hasProp.call(_ref1, key)) continue;
            pathmap = _ref1[key];
            title = "" + monster.name + " " + monster.id + " " + key;
            Brew.Debug.pathmaps.list.push([title, pathmap]);
          }
        }
        _ref2 = Brew.Game.pathmaps;
        for (key in _ref2) {
          if (!__hasProp.call(_ref2, key)) continue;
          pathmap = _ref2[key];
          title = "game " + key;
          Brew.Debug.pathmaps.list.push([title, pathmap]);
        }
      }
      arg = Brew.Debug.pathmaps.index;
      delete Brew.Debug.pathmaps["index"];
      Brew.Display.drawDisplayAll();
      Brew.Debug.pathmaps.index = arg;
      Brew.Debug.pathmaps.index += 1;
      if (Brew.Debug.pathmaps.index === Brew.Debug.pathmaps.list.length) {
        Brew.Debug.pathmaps = {};
      } else {
        console.log("showing pathmap: " + Brew.Debug.pathmaps.list[Brew.Debug.pathmaps.index][0]);
      }
      return Brew.Display.drawDisplayAll();
    },
    debugAtCoords: function() {
      var f, grid_obj_xy, grid_xy, i, key, m, map_xy, mem, monster, o, pathmap, title, _i, _len, _ref, _ref1, _ref2;
      grid_obj_xy = grid_manager.getLastVisitGrid();
      grid_xy = new Coordinate(grid_obj_xy.x, grid_obj_xy.y);
      if (Brew.Display.getPanelAt(grid_xy) !== "game") {
        return;
      }
      map_xy = Brew.Display.screenToMap(grid_xy);
      console.log("grid xy", grid_obj_xy);
      console.log("map xy", map_xy);
      key = map_xy.toKey();
      console.log("key", key);
      console.log("terrain", Brew.gameLevel().getTerrainAt(map_xy));
      f = Brew.gameLevel().getFeatureAt(map_xy);
      console.log("feature", f != null ? f : "none");
      i = Brew.gameLevel().getItemAt(map_xy);
      console.log("item", i != null ? i : "none");
      m = Brew.gameLevel().getMonsterAt(map_xy);
      console.log("monster", m != null ? m : "none");
      o = Brew.gameLevel().getOverheadAt(map_xy);
      console.log("overhead", o != null ? o : "none");
      mem = Brew.gamePlayer().getMemoryAt(Brew.gameLevel().id, map_xy);
      console.log("memory", mem != null ? mem : "none");
      console.log("can_view", Brew.gamePlayer().canView(map_xy));
      console.log("light", Brew.gameLevel().getLightAt(map_xy));
      console.log("light (NoA)", Brew.gameLevel().getLightAt_NoAmbient(map_xy));
      _ref = Brew.gameLevel().getMonsters();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        monster = _ref[_i];
        _ref1 = monster.pathmaps;
        for (key in _ref1) {
          if (!__hasProp.call(_ref1, key)) continue;
          pathmap = _ref1[key];
          title = "" + monster.name + " " + monster.id + " " + key;
          console.log("pathmap " + title + ":", pathmap[map_xy.toKey()]);
        }
      }
      _ref2 = Brew.Game.pathmaps;
      for (key in _ref2) {
        if (!__hasProp.call(_ref2, key)) continue;
        pathmap = _ref2[key];
        title = "game " + key;
        console.log("pathmap " + title + ":", pathmap[map_xy.toKey()]);
      }
      return true;
    }
  };

}).call(this);

//# sourceMappingURL=debug.map
