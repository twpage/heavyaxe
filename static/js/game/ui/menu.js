// Generated by CoffeeScript 1.7.1
(function() {
  var activateDialogScreen, drawBorders;

  window.Brew.Menu = {
    popup: {},
    showInfoScreen: function() {
      var instructions, title;
      title = Brew.Catalog.getItemName(Brew.Menu.popup.item);
      instructions = "Press any key to dismiss";
      activateDialogScreen(title, instructions, Brew.colors.pink);
      return Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 3, Brew.Menu.popup.item.description, Brew.panels.game.width - 1);
    },
    showRecall: function() {
      var line_color, path, xy, _i, _j, _len, _len1, _ref;
      if (Brew.Menu.popup.recall == null) {
        Brew.Menu.popup.recall = Brew.Axe.getRecallPaths();
      }
      if (Brew.Menu.popup.path != null) {
        _ref = Brew.Menu.popup.path;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          xy = _ref[_i];
          Brew.Display.clearHighlightAt(xy);
          Brew.Display.drawMapAt(xy);
        }
      }
      path = Brew.Menu.popup.recall.getCurrentPath();
      Brew.Menu.popup.path = path;
      line_color = Brew.colors.recall;
      for (_j = 0, _len1 = path.length; _j < _len1; _j++) {
        xy = path[_j];
        Brew.Display.setHighlightAt(xy, line_color);
        Brew.Display.drawMapAt(xy);
      }
      return Brew.Input.setInputHandler("recall");
    },
    showInventory: function() {
      var action_color_hex, color_hotkey_hex, color_text_hex, color_title_hex, i, instruction_text, instruction_text_list, item, item_color, item_title, last_input_type, number, text_activate, text_cancel, text_cycle, text_width, _i, _len;
      color_title_hex = ROT.Color.toHex(Brew.colors.inventorymenu.title);
      color_text_hex = ROT.Color.toHex(Brew.colors.inventorymenu.text);
      color_hotkey_hex = ROT.Color.toHex(Brew.colors.inventorymenu.hotkey);
      if (Brew.Menu.popup.inventory == null) {
        Brew.Menu.popup.inventory = Brew.Axe.getScrollInventory();
      }
      item = Brew.Menu.popup.inventory.getExampleOfCurrent();
      item_title = Brew.Catalog.getItemName(item);
      item_color = Brew.Catalog.getItemColor(item);
      activateDialogScreen(item.code, "", item_color);
      text_width = Brew.config.dialog_display.width - 2;
      Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 1, "%c{white}" + (Brew.Catalog.getItemName(item)) + "%c{}", text_width);
      number = Brew.Menu.popup.inventory.getNumberOfCurrent();
      Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 3, "You have " + number + " of them", text_width);
      Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 5, Brew.Catalog.getItemDescription(item), text_width);
      last_input_type = Brew.Input.getLastInputType();
      action_color_hex = ROT.Color.toHex(item_color);
      if (last_input_type === Brew.input_type.keyboard) {
        text_activate = "Press SPACE";
        text_cycle = Brew.unicode.arrow_w + " left or right " + Brew.unicode.arrow_e;
        text_cancel = "Press I or E";
      } else if (last_input_type === Brew.input_type.gamepad) {
        text_activate = "Button %c{green}A%c{}";
        text_cycle = Brew.unicode.arrow_w + " left or right " + Brew.unicode.arrow_e;
        text_cancel = "Button %c{lightblue}X%c{}";
      } else if (last_input_type === Brew.input_type.mouse) {
        text_activate = "Click the middle";
        text_cycle = Brew.unicode.arrow_w + " Click the sides " + Brew.unicode.arrow_e;
        text_cancel = "Right- or Long- Click";
      }
      instruction_text_list = ["%c{white}Activate%c{}", "%c{grey}" + text_activate + "%c{}", "%c{white}Cycle Items%c{}", "%c{grey}" + text_cycle + "%c{}", "%c{white}Cancel (Esc)%c{}", "%c{grey}" + text_cancel + "%c{}"];
      if (last_input_type === Brew.input_type.mouse) {
        instruction_text_list.push("%c{grey}or click below%c{}");
      }
      for (i = _i = 0, _len = instruction_text_list.length; _i < _len; i = ++_i) {
        instruction_text = instruction_text_list[i];
        Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.config.dialog_display.height - (instruction_text_list.length - i + 1), instruction_text, text_width);
      }
      return Brew.Input.setInputHandler("inventory");
    },
    showDied: function() {
      Brew.Display.drawDisplayAll({
        color_override: Brew.colors.dim_screen
      });
      $("#id_div_onscreeninfo").html("<p>Congratulations, you have died!</p>\n<br/>\n<p><span style='color: violet'>Killed on level " + (Brew.gameLevel().depth + 1) + " after " + Brew.Game.turn + " turns</span></p>\n<br/>\n<p>Hit <strong>ENTER</strong> to start a new game.</p>\n<p>To try the same seed again, use the link at the bottom of the game screen.</p>\n<br/>\n<p>Thank you for playing!</p>");
      return Brew.Input.setInputHandler("died");
    },
    showVictory: function() {
      Brew.Display.drawDisplayAll({
        color_override: Brew.colors.violet
      });
      $("#id_div_onscreeninfo").html("<p>Victory!</p>\n<br/>\n<p>I have to be honest, I did not think it was possible to win the 7DRL version...</p>\n<br/>\n<p><span style='color: violet'>Smote the Gods on level " + (Brew.gameLevel().depth + 1) + " after " + Brew.Game.turn + " turns</span></p>\n<br/>\n<p>Hit <strong>ENTER</strong> to start a new game.</p>\n<p>Use the link at the bottom of the game screen to try for a lower turn-count or to challenge your friends!</p>\n<br/>\n<p>Thank you for playing!</p>");
      return Brew.Input.setInputHandler("died");
    },
    showHelp: function() {
      activateDialogScreen("Help");
      Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 1, Brew.helptext, Brew.panels.game.width - 2);
      return Brew.Input.setInputHandler("popup_to_dismiss");
    },
    showMonsterInfo: function() {
      var desc, flag, i, _i, _len, _ref;
      activateDialogScreen(Brew.Menu.popup.monster.name);
      desc = Brew.Menu.popup.monster.description != null ? Brew.Menu.popup.monster.description : "No description";
      Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 3, desc, Brew.panels.game.width - 2);
      i = 0;
      _ref = Brew.Menu.popup.monster.getFlags();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        flag = _ref[_i];
        desc = Brew.flagDesc[flag][0];
        Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 8 + i, desc, Brew.panels.game.width - 2);
        i += 1;
      }
      return Brew.Input.setInputHandler("popup_to_dismiss");
    }
  };

  activateDialogScreen = function(title, instruct_text, highlight_color) {
    var color_hex;
    if (instruct_text === "") {
      instruct_text = "Press any key to dismiss";
    }
    if (highlight_color == null) {
      highlight_color = Brew.colors.white;
    }
    Brew.Display.drawDisplayAll({
      color_override: Brew.colors.dim_screen
    });
    Brew.Display.resetDialogDisplayTransparency();
    Brew.Display.clearDialogDisplay();
    drawBorders(Brew.Display.dialogDisplay(), highlight_color);
    color_hex = ROT.Color.toHex(highlight_color);
    Brew.Display.dialogDisplay().drawText(Brew.panels.game.x + 1, Brew.panels.game.y + 0, "%c{" + color_hex + "}[ " + title + " ]");
    return Brew.Input.setInputHandler("popup_to_dismiss");
  };

  drawBorders = function(display, color, rectangle) {
    var col_x, h, hex_color, row_y, w, x, y, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    if (rectangle == null) {
      rectangle = {};
    }
    hex_color = ROT.Color.toHex(color);
    h = (_ref = rectangle.height) != null ? _ref : Brew.config.dialog_display.height - 1;
    w = (_ref1 = rectangle.width) != null ? _ref1 : Brew.config.dialog_display.width - 1;
    x = (_ref2 = rectangle.x) != null ? _ref2 : 0;
    y = (_ref3 = rectangle.y) != null ? _ref3 : 0;
    for (row_y = _i = y, _ref4 = y + h; y <= _ref4 ? _i <= _ref4 : _i >= _ref4; row_y = y <= _ref4 ? ++_i : --_i) {
      display.draw(x, row_y, "|", hex_color);
      display.draw(x + w, row_y, "|", hex_color);
    }
    for (col_x = _j = x, _ref5 = x + w; x <= _ref5 ? _j <= _ref5 : _j >= _ref5; col_x = x <= _ref5 ? ++_j : --_j) {
      display.draw(col_x, y, Brew.unicode.horizontal_line, hex_color);
      display.draw(col_x, y + h, Brew.unicode.horizontal_line, hex_color);
    }
    display.draw(x, y, Brew.unicode.corner_topleft, hex_color);
    display.draw(x, y + h, Brew.unicode.corner_bottomleft, hex_color);
    display.draw(x + w, y, Brew.unicode.corner_topright, hex_color);
    return display.draw(x + w, y + h, Brew.unicode.corner_bottomright, hex_color);
  };

}).call(this);

//# sourceMappingURL=menu.map
