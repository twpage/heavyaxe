// Generated by CoffeeScript 1.7.1
(function() {
  var clearMenuAndInputHandler, inputDied, inputGameplay, inputInventory, inputPopupToDismiss, inputRecall, inputSpaceToDismiss, inputTargeting, input_handler, last_input_type, playerMouseAltClick, playerMouseAltClick_Game, playerMouseAltClick_Inventory, playerMouseClick, playerMouseClick_Game, playerMouseClick_Inventory,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  input_handler = null;

  last_input_type = null;

  window.Brew.Input = {
    setInputHandler: function(new_handler) {
      input_handler = new_handler;
      return true;
    },
    getInputHandler: function() {
      return input_handler;
    },
    clearInputHandler: function() {
      input_handler = null;
      return true;
    },
    getLastInputType: function() {
      return last_input_type;
    },
    keypress: function(e) {
      var shift_key, ui_keycode;
      last_input_type = Brew.input_type.keyboard;
      ui_keycode = e.keyCode;
      shift_key = e.shiftKey;
      return this.keypress_key(ui_keycode, shift_key);
    },
    keypress_key: function(ui_keycode, shift_key) {
      if (Brew.Game.hasAnimations()) {
        return console.log("ignoring input while animations finish their thing");
      } else {
        if (!input_handler) {
          return inputGameplay(ui_keycode, shift_key);
        } else if (input_handler === "inventory") {
          return inputInventory(ui_keycode);
        } else if (input_handler === "popup_to_dismiss") {
          return inputPopupToDismiss(ui_keycode);
        } else if (input_handler === "died") {
          return inputDied(ui_keycode, shift_key);
        } else if (input_handler === "victory") {
          return inputVictory(ui_keycode, shift_key);
        } else if (input_handler === "recall") {
          return inputRecall(ui_keycode, shift_key);
        }
      }
    },
    mouseDown: function(grid_obj_xy, button, shift_key) {
      var grid_xy, map_xy;
      last_input_type = Brew.input_type.mouse;
      grid_xy = new Coordinate(grid_obj_xy.x, grid_obj_xy.y);
      map_xy = Brew.Display.screenToMap(grid_xy);
      if (shift_key) {
        return Brew.Game.debugClick(map_xy);
      } else if (input_handler === "targeting") {
        return inputTargeting(ROT.VK_SPACE);
      } else {
        if (button !== 0 || ((shift_key != null) && shift_key)) {
          return playerMouseAltClick(map_xy);
        } else {
          return playerMouseClick(map_xy);
        }
      }
    },
    mouseLongClick: function(grid_obj_xy, button, shift_key) {
      var grid_xy, map_xy;
      last_input_type = Brew.input_type.mouse;
      grid_xy = new Coordinate(grid_obj_xy.x, grid_obj_xy.y);
      map_xy = Brew.Display.screenToMap(grid_xy);
      return playerMouseAltClick(map_xy);
    },
    mouseGainFocus: function(grid_obj_xy) {
      var grid_xy, map_xy;
      grid_xy = new Coordinate(grid_obj_xy.x, grid_obj_xy.y);
      if (Brew.Display.getPanelAt(grid_xy) !== "game") {
        return;
      }
      map_xy = Brew.Display.screenToMap(grid_xy);
      $("#id_div_coord_debug").html("<p>(" + map_xy.x + ", " + map_xy.y + ")</p>");
      if (input_handler === "targeting") {
        return Brew.Targeting.updateAndDrawTargeting(map_xy);
      } else if (input_handler === null) {
        return grid_manager.drawBorderAt(grid_obj_xy, 'white');
      }
    },
    mouseLeaveFocus: function(grid_obj_xy) {
      var grid_xy, map_xy;
      if (input_handler === null) {
        grid_xy = new Coordinate(grid_obj_xy.x, grid_obj_xy.y);
        if (Brew.Display.getPanelAt(grid_xy) !== "game") {
          return;
        }
        map_xy = Brew.Display.screenToMap(grid_xy);
        return Brew.Display.drawMapAt(map_xy);
      }
    },
    gamepadInput: function(button) {
      last_input_type = Brew.input_type.gamepad;
      if (button === Brew.GamepadMap.BUTTON_UP) {
        return this.keypress_key(Brew.keymap.MOVE_UP[0]);
      } else if (button === Brew.GamepadMap.BUTTON_DOWN) {
        return this.keypress_key(Brew.keymap.MOVE_DOWN[0]);
      } else if (button === Brew.GamepadMap.BUTTON_RIGHT) {
        return this.keypress_key(Brew.keymap.MOVE_RIGHT[0]);
      } else if (button === Brew.GamepadMap.BUTTON_LEFT) {
        return this.keypress_key(Brew.keymap.MOVE_LEFT[0]);
      } else if (button === Brew.GamepadMap.BUTTON_A) {
        return this.keypress_key(Brew.keymap.GENERIC_ACTION[0]);
      } else if (button === Brew.GamepadMap.BUTTON_B) {
        return this.keypress_key(Brew.keymap.DROP[0]);
      } else if (button === Brew.GamepadMap.BUTTON_X) {
        return this.keypress_key(Brew.keymap.INVENTORY[0]);
      } else {
        return console.log("that button doesnt do anythign");
      }
    }
  };

  inputGameplay = function(keycode, shift_key) {
    var offset_xy;
    if (__indexOf.call(Brew.keymap.MOVEKEYS, keycode) >= 0) {
      offset_xy = Brew.utils.getOffsetFromKey(keycode);
      return Brew.Game.movePlayer(offset_xy);
    } else if (__indexOf.call(Brew.keymap.GENERIC_ACTION, keycode) >= 0) {
      return Brew.Axe.doPlayerAction();
    } else if (__indexOf.call(Brew.keymap.DROP, keycode) >= 0) {
      return Brew.Axe.doPlayerDropAxe();
    } else if (__indexOf.call(Brew.keymap.INVENTORY, keycode) >= 0) {
      return Brew.Menu.showInventory();
    } else if (keycode === 220) {
      return Brew.Debug.debugPathMaps();
    } else if (__indexOf.call(Brew.keymap.HELP, keycode) >= 0) {
      return this.showHelp();
    } else if (__indexOf.call(Brew.keymap.DEBUG, keycode) >= 0) {
      return Brew.Debug.debugAtCoords();
    } else if (__indexOf.call([49, 50, 51, 52, 53, 54, 55, 56, 57], keycode) >= 0) {
      return Brew.Axe.doPlayerSelectInventoryHotKey(keycode);
    }
  };

  inputInventory = function(keycode) {
    var item;
    if (__indexOf.call(Brew.keymap.MOVE_LEFT, keycode) >= 0) {
      Brew.Menu.popup.inventory.prev();
      return Brew.Menu.showInventory();
    } else if (__indexOf.call(Brew.keymap.MOVE_RIGHT, keycode) >= 0) {
      Brew.Menu.popup.inventory.next();
      return Brew.Menu.showInventory();
    } else if (__indexOf.call(Brew.keymap.GENERIC_ACTION, keycode) >= 0) {
      item = Brew.Menu.popup.inventory.getExampleOfCurrent();
      clearMenuAndInputHandler();
      return Brew.Game.doPlayerApply(item);
    } else if (__indexOf.call(Brew.keymap.MOVE_UP, keycode) >= 0) {

    } else if (__indexOf.call(Brew.keymap.MOVE_DOWN, keycode) >= 0) {

    } else {
      return clearMenuAndInputHandler();
    }
  };

  inputRecall = function(keycode) {
    var axe_xy, path;
    if (__indexOf.call(Brew.keymap.MOVE_LEFT, keycode) >= 0) {
      Brew.Menu.popup.recall.prev();
      return Brew.Menu.showRecall();
    } else if (__indexOf.call(Brew.keymap.MOVE_RIGHT, keycode) >= 0) {
      Brew.Menu.popup.recall.next();
      return Brew.Menu.showRecall();
    } else if (__indexOf.call(Brew.keymap.GENERIC_ACTION, keycode) >= 0) {
      path = Brew.Menu.popup.recall.getCurrentPath();
      axe_xy = clone(Brew.Menu.popup.axe_xy);
      clearMenuAndInputHandler();
      return Brew.Axe.doRecallAxeWithPath(path, axe_xy);
    } else if (__indexOf.call(Brew.keymap.MOVE_UP, keycode) >= 0) {

    } else if (__indexOf.call(Brew.keymap.MOVE_DOWN, keycode) >= 0) {

    } else {
      return clearMenuAndInputHandler();
    }
  };

  inputSpaceToDismiss = function(keycode) {
    if (keycode === 32 || keycode === 13 || keycode === 27) {
      return clearMenuAndInputHandler();
    }
  };

  inputPopupToDismiss = function(keycode) {
    return clearMenuAndInputHandler();
  };

  inputDied = function(keycode) {
    if (keycode === 13) {
      $("#id_div_popup").hide();
      clearMenuAndInputHandler();
      // return window.location.replace("/");
      return window.location.reload();
    } else if (keycode === 27) {
      $("#id_div_popup").hide();
      clearMenuAndInputHandler();
      // return window.location.replace("/");
      return window.location.reload();
    }
  };

  inputTargeting = function(keycode, shift_key) {
    var offset_xy, popup_xy, target_xy, _ref;
    console.log("input targeting");
    popup_xy = clone(Brew.Menu.popup.xy);
    if (__indexOf.call(Brew.keymap.MOVEKEYS, keycode) >= 0) {
      offset_xy = Brew.utils.getOffsetFromKey(keycode);
      target_xy = popup_xy.add(offset_xy);
      Brew.Menu.popup.target_index = -1;
      return Brew.Targeting.updateAndDrawTargeting(target_xy);
    } else if (__indexOf.call(Brew.keymap.GENERIC_ACTION, keycode) >= 0) {
      if (!Brew.Menu.popup.is_ok) {
        return Brew.msg(Brew.Menu.popup.err_msg);
      } else {
        input_handler = null;
        Brew.Display.clearHighlights();
        Brew.Display.drawDisplayAll();
        Brew.Game.doTargetingAt(Brew.Menu.popup.target_context, (_ref = Brew.Menu.popup.item) != null ? _ref : Brew.Menu.popup.power, Brew.Menu.popup.xy);
        return Brew.Menu.popup = {};
      }
    } else if (__indexOf.call(Brew.keymap.EXIT_OR_CANCEL, keycode) >= 0) {
      return clearMenuAndInputHandler();
    } else if (__indexOf.call(Brew.keymap.CYCLE_TARGET, keycode) >= 0) {
      if (Brew.Menu.popup.target_index === -1) {
        Brew.Menu.popup.target_index = 0;
      } else {
        Brew.Menu.popup.target_index = (Brew.Menu.popup.target_index + 1).mod(Brew.Menu.popup.targets.length);
      }
      return Brew.Targeting.updateAndDrawTargeting(Brew.Menu.popup.targets[Brew.Menu.popup.target_index].coordinates);
    }
  };

  clearMenuAndInputHandler = function() {
    Brew.Display.clearHighlights();
    Brew.Display.clearDialogDisplay();
    Brew.Display.drawDisplayAll();
    Brew.Menu.popup = {};
    return input_handler = null;
  };

  playerMouseClick = function(map_xy) {
    if (input_handler === "inventory") {
      return playerMouseClick_Inventory(map_xy);
    } else {
      return playerMouseClick_Game(map_xy);
    }
  };

  playerMouseAltClick = function(map_xy) {
    if (input_handler === "inventory") {
      return playerMouseAltClick_Inventory(map_xy);
    } else {
      return playerMouseAltClick_Game(map_xy);
    }
  };

  playerMouseClick_Game = function(map_xy) {
    var offset_xy, player;
    if (!map_xy) {
      return Brew.Input.keypress_key(Brew.keymap.INVENTORY[0]);
    } else {
      player = Brew.gamePlayer();
      if (player.coordinates.compare(map_xy)) {
        return Brew.Input.keypress_key(Brew.keymap.GENERIC_ACTION[0]);
      } else if (map_xy.x === 0) {
        return Brew.Input.keypress_key(Brew.keymap.MOVE_LEFT[0]);
      } else if (map_xy.x === Brew.panels.game.width - 1) {
        return Brew.Input.keypress_key(Brew.keymap.MOVE_RIGHT[0]);
      } else if (map_xy.y === 0) {
        return Brew.Input.keypress_key(Brew.keymap.MOVE_UP[0]);
      } else if (map_xy.y === Brew.panels.game.height - 1) {
        return Brew.Input.keypress_key(Brew.keymap.MOVE_DOWN[0]);
      } else {
        offset_xy = map_xy.subtract(player.coordinates);
        if (Math.abs(offset_xy.x) > Math.abs(offset_xy.y)) {
          if (offset_xy.x > 0) {
            return Brew.Input.keypress_key(Brew.keymap.MOVE_RIGHT[0]);
          } else {
            return Brew.Input.keypress_key(Brew.keymap.MOVE_LEFT[0]);
          }
        } else if (Math.abs(offset_xy.x) < Math.abs(offset_xy.y)) {
          if (offset_xy.y > 0) {
            return Brew.Input.keypress_key(Brew.keymap.MOVE_DOWN[0]);
          } else {
            return Brew.Input.keypress_key(Brew.keymap.MOVE_UP[0]);
          }
        } else {
          return console.log("click direction not unique enough");
        }
      }
    }
  };

  playerMouseAltClick_Game = function(map_xy) {
    var panel, player;
    panel = Brew.Display.getPanelAt(map_xy);
    player = Brew.gamePlayer();
    if (player.coordinates.compare(map_xy)) {
      return Brew.Input.keypress_key(Brew.keymap.DROP[0]);
    } else {
      return Brew.Input.keypress_key(Brew.keymap.INVENTORY[0]);
    }
  };

  playerMouseClick_Inventory = function(map_xy) {
    var dialog_xy, quarter_length, screen_xy;
    if (!map_xy) {
      return Brew.Input.keypress_key(Brew.keymap.INVENTORY[0]);
    } else {
      screen_xy = Brew.Display.mapToScreen(map_xy);
      dialog_xy = Brew.Display.gameToDialog(screen_xy);
      quarter_length = Brew.config.dialog_display.width / 4;
      if (dialog_xy.x < quarter_length) {
        return Brew.Input.keypress_key(Brew.keymap.MOVE_LEFT[0]);
      } else if (dialog_xy.x < (quarter_length * 3)) {
        return Brew.Input.keypress_key(Brew.keymap.GENERIC_ACTION[0]);
      } else {
        return Brew.Input.keypress_key(Brew.keymap.MOVE_RIGHT[0]);
      }
    }
  };

  playerMouseAltClick_Inventory = function(map_xy) {
    return Brew.Input.keypress_key(Brew.keymap.INVENTORY[0]);
  };

}).call(this);

//# sourceMappingURL=input.map
